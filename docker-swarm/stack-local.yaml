version: '3.8'

services:
  nginx:
    image: nginx:1.27.2-alpine  # Use official image for local testing
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.25'
          memory: 64M
    ports:
      - "80:80"
    configs:
      - source: nginx_config
        target: /etc/nginx/nginx.conf
    networks:
      - omni-network

  user-service:
    image: localhost:5000/user-service:latest
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          cpus: '1'
          memory: 256M
        reservations:
          cpus: '0.5'
          memory: 128M
    environment:
      - ENVIRONMENT=local
      - MODE=memcached
      - USER_REDIS_PASSWORD=sadasdasdasddsfwerweraewrsd34
      - USER_REDIS_PORT=6379
      - USER_SERVICE_INTERNAL_PORT=8080
    networks:
      - omni-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "-O", "/dev/null", "http://localhost:8080/api/users/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  user-redis:
    image: redis:alpine
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    command: redis-server --appendonly yes --requirepass sadasdasdasddsfwerweraewrsd34
    volumes:
      - redis_data:/data
    networks:
      - omni-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Kafka broker - commented out for now due to DNS issues in Swarm
  # Uncomment and configure when needed for production
  # broker:
  #   image: apache/kafka:3.7.0
  #   deploy:
  #     replicas: 1
  #     placement:
  #       constraints:
  #         - node.role == manager
  #     restart_policy:
  #       condition: on-failure
  #       delay: 5s
  #       max_attempts: 3
  #       window: 120s
  #     resources:
  #       limits:
  #         cpus: '1'
  #         memory: 512M
  #       reservations:
  #         cpus: '0.5'
  #         memory: 256M
  #   environment:
  #     - KAFKA_NODE_ID=1
  #     - KAFKA_PROCESS_ROLES=broker,controller
  #     - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
  #     - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://broker:9092
  #     - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER
  #     - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
  #     - KAFKA_CONTROLLER_QUORUM_VOTERS=1@broker:9093
  #     - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
  #     - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
  #     - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
  #     - KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=0
  #     - KAFKA_NUM_PARTITIONS=3
  #   networks:
  #     - omni-network
  #   healthcheck:
  #     test: ["CMD-SHELL", "/opt/kafka/bin/kafka-broker-api-versions.sh --bootstrap-server broker:9092"]
  #     interval: 10s
  #     timeout: 10s
  #     retries: 5
  #     start_period: 15s

networks:
  omni-network:
    driver: overlay
    attachable: true

volumes:
  redis_data:
    driver: local

configs:
  nginx_config:
    file: ../0-nginx/nginx-swarm.conf
