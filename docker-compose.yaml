services:
  broker:
    image: apache/kafka:3.7.0
    container_name: kafka
    # volumes:
    #   - kafka_data:/opt/kafka/data
    #   - kafka_logs:/opt/kafka/logs
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "/opt/kafka/bin/kafka-broker-api-versions.sh --bootstrap-server broker:9092",
        ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 15s
    environment:
      KAFKA_NODE_ID: ${KAFKA_NODE_ID}
      KAFKA_PROCESS_ROLES: ${KAFKA_PROCESS_ROLES}
      KAFKA_LISTENERS: ${KAFKA_LISTENERS}
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS}
      KAFKA_CONTROLLER_LISTENER_NAMES: ${KAFKA_CONTROLLER_LISTENER_NAMES}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: ${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP}
      KAFKA_CONTROLLER_QUORUM_VOTERS: ${KAFKA_CONTROLLER_QUORUM_VOTERS}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: ${KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR}
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: ${KAFKA_TRANSACTION_STATE_LOG_MIN_ISR}
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: ${KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS}
      KAFKA_NUM_PARTITIONS: ${KAFKA_NUM_PARTITIONS}
      # KAFKA_LOG_DIRS: "/opt/kafka/logs"
      # KAFKA_DATA_DIRS: "/opt/kafka/data"
  
  nginx:
    image: nginx:1.27.2-alpine
    container_name: nginx
    ports:
      - "${NGINX_PORT}:80"
    volumes:
      - ./0-nginx/nginx.conf:/etc/nginx/nginx.conf:ro
   
  user-redis:
    image: redis:alpine
    container_name: user-redis
    ports:
      - "${USER_REDIS_PORT}:6379"
    volumes:
      - user_redis_data:/data
    restart: always
    command: redis-server --appendonly yes --requirepass ${USER_REDIS_PASSWORD}

  user-service:
    container_name: user-service
    build: ./1-users
    ports:
      - "${USER_SERVICE_PORT}:${USER_SERVICE_INTERNAL_PORT}"
    depends_on:
      broker:
        condition: service_healthy
      user-redis:
        condition: service_started
    restart: always
    environment:
      - USER_REDIS_PASSWORD=${USER_REDIS_PASSWORD}
      - USER_REDIS_PORT=${USER_REDIS_PORT}
      - ENVIRONMENT=${ENVIRONMENT}
      - MODE=${MODE}

  notification-service:
    container_name: notification-service
    image: fastapi_app:latest
    build:
      context: ./2-notification
      target: development # or 'production' for prod
    ports:
      - "${NOTIFICATION_SERVICE_PORT}:${NOTIFICATION_SERVICE_INTERNAL_PORT}"
    environment:
      - TESTING_NOTIFICATION_SERVICE_SMTP_HOST=${TESTING_NOTIFICATION_SERVICE_SMTP_HOST}
      - TESTING_NOTIFICATION_SERVICE_SMTP_PORT=${TESTING_NOTIFICATION_SERVICE_SMTP_PORT}
      - NOTIFICATION_SERVICE_KAFKA_BOOTSTRAP_SERVERS=broker:9092
      - NOTIFICATION_SERVICE_KAFKA_TOPIC=${NOTIFICATION_SERVICE_KAFKA_TOPIC}
      - ENV=development
      - PORT=${NOTIFICATION_SERVICE_INTERNAL_PORT}
      - REDIS_HOST=notification-redis
      - REDIS_PORT=6379
    depends_on:
      - mailhog
      - broker
      - notification-redis
    # networks:
    #   - app-network

  # compliance-service:
  #   container_name: compliance-service
  #   build:
  #     context: ./6-compliance-engine
  #     target: development # or 'production' for prod
  #   ports:
  #     - "${COMPLIANCE_SERVICE_PORT}:${COMPLIANCE_SERVICE_INTERNAL_PORT}"
  #   environment:
  #     - ENV=development
  #     - PORT=${COMPLIANCE_SERVICE_INTERNAL_PORT}

  notification-redis:
    image: redis:alpine
    container_name: notification-redis
    restart: always

  wallet-redis:
    image: redis:alpine
    container_name: wallet-redis
    ports:
      - "${WALLET_REDIS_PORT}:6379"
    volumes:
      - wallet_redis_data:/data
    restart: always
    command: redis-server --appendonly yes --requirepass ${WALLET_REDIS_PASSWORD}

  wallet-service:
    container_name: wallet-service
    build: ./3-wallet
    ports:
      - "${WALLET_SERVICE_PORT}:${WALLET_SERVICE_INTERNAL_PORT}"
    depends_on:
      broker:
        condition: service_healthy
      wallet-redis:
        condition: service_started
    restart: on-failure:3
    environment:
      - WALLET_REDIS_PASSWORD=${WALLET_REDIS_PASSWORD}
      - WALLET_REDIS_PORT=${WALLET_REDIS_PORT}
      - ENVIRONMENT=${ENVIRONMENT}
      - MODE=${MODE}
      - KAFKA_RETRY_ATTEMPTS=5
      - KAFKA_RETRY_DELAY=2

  transaction-service:
    container_name: transaction-service
    build: ./4-transactions
    ports:
      - "${TRANSACTION_SERVICE_PORT}:${TRANSACTION_SERVICE_INTERNAL_PORT}"
    depends_on:
      broker:
        condition: service_healthy
      transaction-redis:
        condition: service_started
      fraud-detection-service:
        condition: service_started
    restart: on-failure:3
    environment:
      - REDIS_HOST=transaction-redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${TRANSACTION_REDIS_PASSWORD}
      - ENVIRONMENT=${ENVIRONMENT}
      - MODE=${MODE}
      - PORT=${TRANSACTION_SERVICE_INTERNAL_PORT}
      - USER_SERVICE_URL=http://user-service:8080
      - WALLET_SERVICE_URL=http://wallet-service:8080
      - FRAUD_DETECTION_URL=http://fraud-detection-service:8085

  transaction-redis:
    image: redis:alpine
    container_name: transaction-redis
    ports:
      - "${TRANSACTION_REDIS_PORT}:6379"
    volumes:
      - transaction_redis_data:/data
    restart: always
    command: redis-server --appendonly yes --requirepass ${TRANSACTION_REDIS_PASSWORD}

  fraud-detection-service:
    container_name: fraud-detection-service
    build: ./5-fraud-detection
    ports:
      - "${FRAUD_DETECTION_SERVICE_PORT}:${FRAUD_DETECTION_SERVICE_INTERNAL_PORT}"
    restart: on-failure:3
    environment:
      - PORT=${FRAUD_DETECTION_SERVICE_INTERNAL_PORT}
      - ENVIRONMENT=${ENVIRONMENT}

  mailhog:
    image: mailhog/mailhog:latest
    container_name: mailhog
    ports:
      - "${TESTING_NOTIFICATION_SERVICE_WEB_UI}:8025"  # Web UI
      - "${TESTING_NOTIFICATION_SERVICE_SMTP_PORT}:1025"  # SMTP
    restart: always

volumes:
  wallet_redis_data:
  user_redis_data:
  transaction_redis_data:

