apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: omni-server
data:
  nginx.conf: |
    events {
        worker_connections 1024;
    }

    http {
        upstream user_service {
            server user-service:8080;
        }

        server {
            listen 80;

            location /api/users {
                proxy_pass http://user_service;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }

            location /health {
                return 200 "OK";
                add_header Content-Type text/plain;
            }
        }
    }
---
apiVersion: v1
kind: Service
metadata:
  name: nginx
  namespace: omni-server
spec:
  selector:
    app: nginx
  ports:
    - port: 80
      targetPort: 80
  type: LoadBalancer  # This will create a GCP Load Balancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  namespace: omni-server
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.27.2-alpine
        ports:
        - containerPort: 80
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        resources:
          requests:
            memory: "32Mi"
            cpu: "25m"
          limits:
            memory: "64Mi"
            cpu: "50m"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config
