name: Build and Deploy to GKE

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: omni-server-cluster
  GKE_REGION: us-central1
  IMAGE: user-service

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    # Authenticate to Google Cloud using Workload Identity
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    # Setup gcloud CLI
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    # Configure Docker to use gcloud as a credential helper
    - name: Configure Docker
      run: gcloud auth configure-docker

    # Get GKE credentials
    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials $GKE_CLUSTER --region $GKE_REGION

    # Build the Docker image
    - name: Build Docker image
      run: |
        docker build -t gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA \
          -t gcr.io/$PROJECT_ID/$IMAGE:latest \
          ./1-users

    # Push the Docker image to Google Container Registry
    - name: Push to GCR
      run: |
        docker push gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA
        docker push gcr.io/$PROJECT_ID/$IMAGE:latest

    # Deploy to GKE (only on push to main)
    - name: Deploy to GKE
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        # Apply all manifests
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/secret.yaml
        kubectl apply -f k8s/redis-statefulset.yaml
        kubectl apply -f k8s/user-service-deployment.yaml
        kubectl apply -f k8s/nginx-deployment.yaml
        kubectl apply -f k8s/hpa.yaml

        # Update the image
        kubectl set image deployment/user-service \
          user-service=gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA \
          -n omni-server

        # Wait for rollout
        kubectl rollout status deployment/user-service -n omni-server
        kubectl rollout status deployment/nginx -n omni-server

    # Display deployment info
    - name: Get deployment info
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        kubectl get services -n omni-server
        kubectl get pods -n omni-server
